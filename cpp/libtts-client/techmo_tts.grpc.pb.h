// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: techmo_tts.proto
// Original file comments:
// Techmo TTS API
// version: 2.1.0
// authors: Dawid Skurzok, Paweł Jaciów, Michał Radziszewski
// date:    2021-04-21
#ifndef GRPC_techmo_5ftts_2eproto__INCLUDED
#define GRPC_techmo_5ftts_2eproto__INCLUDED

#include "techmo_tts.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace techmo {
namespace tts {
namespace grpc_api {

// Service that implements Techmo Text-To-Speech (TTS) API.
class TTS final {
 public:
  static constexpr char const* service_full_name() {
    return "techmo.tts.grpc_api.TTS";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Lists all available voices which can be used to synthesize speech.
    virtual ::grpc::Status ListVoices(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::ListVoicesRequest& request, ::techmo::tts::grpc_api::ListVoicesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tts::grpc_api::ListVoicesResponse>> AsyncListVoices(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::ListVoicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tts::grpc_api::ListVoicesResponse>>(AsyncListVoicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tts::grpc_api::ListVoicesResponse>> PrepareAsyncListVoices(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::ListVoicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tts::grpc_api::ListVoicesResponse>>(PrepareAsyncListVoicesRaw(context, request, cq));
    }
    // Synthesizes the speech (audio signal) based on the requested phrase and the optional configuration.
    // Returns audio signal with synthesized speech (streaming version, one or more response packets).
    std::unique_ptr< ::grpc::ClientReaderInterface< ::techmo::tts::grpc_api::SynthesizeResponse>> SynthesizeStreaming(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::SynthesizeRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::techmo::tts::grpc_api::SynthesizeResponse>>(SynthesizeStreamingRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::techmo::tts::grpc_api::SynthesizeResponse>> AsyncSynthesizeStreaming(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::SynthesizeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::techmo::tts::grpc_api::SynthesizeResponse>>(AsyncSynthesizeStreamingRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::techmo::tts::grpc_api::SynthesizeResponse>> PrepareAsyncSynthesizeStreaming(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::SynthesizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::techmo::tts::grpc_api::SynthesizeResponse>>(PrepareAsyncSynthesizeStreamingRaw(context, request, cq));
    }
    // Synthesizes the speech (audio signal) based on the requested phrase and the optional configuration.
    // Returns audio signal with synthesized speech (non-streaming version, always one repsonse packet).
    virtual ::grpc::Status Synthesize(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::SynthesizeRequest& request, ::techmo::tts::grpc_api::SynthesizeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tts::grpc_api::SynthesizeResponse>> AsyncSynthesize(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::SynthesizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tts::grpc_api::SynthesizeResponse>>(AsyncSynthesizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tts::grpc_api::SynthesizeResponse>> PrepareAsyncSynthesize(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::SynthesizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tts::grpc_api::SynthesizeResponse>>(PrepareAsyncSynthesizeRaw(context, request, cq));
    }
    // Adds a new lexicon with the requested name or overwrites the existing one if there is already a lexicon with such name.
    virtual ::grpc::Status PutLexicon(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::PutLexiconRequest& request, ::techmo::tts::grpc_api::PutLexiconResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tts::grpc_api::PutLexiconResponse>> AsyncPutLexicon(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::PutLexiconRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tts::grpc_api::PutLexiconResponse>>(AsyncPutLexiconRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tts::grpc_api::PutLexiconResponse>> PrepareAsyncPutLexicon(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::PutLexiconRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tts::grpc_api::PutLexiconResponse>>(PrepareAsyncPutLexiconRaw(context, request, cq));
    }
    // Removes the lexicon with the requested name.
    virtual ::grpc::Status DeleteLexicon(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::DeleteLexiconRequest& request, ::techmo::tts::grpc_api::DeleteLexiconResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tts::grpc_api::DeleteLexiconResponse>> AsyncDeleteLexicon(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::DeleteLexiconRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tts::grpc_api::DeleteLexiconResponse>>(AsyncDeleteLexiconRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tts::grpc_api::DeleteLexiconResponse>> PrepareAsyncDeleteLexicon(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::DeleteLexiconRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tts::grpc_api::DeleteLexiconResponse>>(PrepareAsyncDeleteLexiconRaw(context, request, cq));
    }
    // Sends back the content of the lexicon with the requested name.
    // Returns the lexicon content.
    virtual ::grpc::Status GetLexicon(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::GetLexiconRequest& request, ::techmo::tts::grpc_api::GetLexiconResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tts::grpc_api::GetLexiconResponse>> AsyncGetLexicon(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::GetLexiconRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tts::grpc_api::GetLexiconResponse>>(AsyncGetLexiconRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tts::grpc_api::GetLexiconResponse>> PrepareAsyncGetLexicon(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::GetLexiconRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tts::grpc_api::GetLexiconResponse>>(PrepareAsyncGetLexiconRaw(context, request, cq));
    }
    // Lists all client-defined lexicons which can be referred by `<lexicon>` tag in synthesize requests.
    // Returns the list of names of lexicons.
    virtual ::grpc::Status ListLexicons(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::ListLexiconsRequest& request, ::techmo::tts::grpc_api::ListLexiconsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tts::grpc_api::ListLexiconsResponse>> AsyncListLexicons(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::ListLexiconsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tts::grpc_api::ListLexiconsResponse>>(AsyncListLexiconsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tts::grpc_api::ListLexiconsResponse>> PrepareAsyncListLexicons(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::ListLexiconsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tts::grpc_api::ListLexiconsResponse>>(PrepareAsyncListLexiconsRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Lists all available voices which can be used to synthesize speech.
      virtual void ListVoices(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::ListVoicesRequest* request, ::techmo::tts::grpc_api::ListVoicesResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListVoices(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::ListVoicesRequest* request, ::techmo::tts::grpc_api::ListVoicesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListVoices(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::ListVoicesRequest* request, ::techmo::tts::grpc_api::ListVoicesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Synthesizes the speech (audio signal) based on the requested phrase and the optional configuration.
      // Returns audio signal with synthesized speech (streaming version, one or more response packets).
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SynthesizeStreaming(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::SynthesizeRequest* request, ::grpc::ClientReadReactor< ::techmo::tts::grpc_api::SynthesizeResponse>* reactor) = 0;
      #else
      virtual void SynthesizeStreaming(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::SynthesizeRequest* request, ::grpc::experimental::ClientReadReactor< ::techmo::tts::grpc_api::SynthesizeResponse>* reactor) = 0;
      #endif
      // Synthesizes the speech (audio signal) based on the requested phrase and the optional configuration.
      // Returns audio signal with synthesized speech (non-streaming version, always one repsonse packet).
      virtual void Synthesize(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::SynthesizeRequest* request, ::techmo::tts::grpc_api::SynthesizeResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Synthesize(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::SynthesizeRequest* request, ::techmo::tts::grpc_api::SynthesizeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Synthesize(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::SynthesizeRequest* request, ::techmo::tts::grpc_api::SynthesizeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Adds a new lexicon with the requested name or overwrites the existing one if there is already a lexicon with such name.
      virtual void PutLexicon(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::PutLexiconRequest* request, ::techmo::tts::grpc_api::PutLexiconResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PutLexicon(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::PutLexiconRequest* request, ::techmo::tts::grpc_api::PutLexiconResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PutLexicon(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::PutLexiconRequest* request, ::techmo::tts::grpc_api::PutLexiconResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Removes the lexicon with the requested name.
      virtual void DeleteLexicon(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::DeleteLexiconRequest* request, ::techmo::tts::grpc_api::DeleteLexiconResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteLexicon(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::DeleteLexiconRequest* request, ::techmo::tts::grpc_api::DeleteLexiconResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteLexicon(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::DeleteLexiconRequest* request, ::techmo::tts::grpc_api::DeleteLexiconResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Sends back the content of the lexicon with the requested name.
      // Returns the lexicon content.
      virtual void GetLexicon(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::GetLexiconRequest* request, ::techmo::tts::grpc_api::GetLexiconResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetLexicon(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::GetLexiconRequest* request, ::techmo::tts::grpc_api::GetLexiconResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetLexicon(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::GetLexiconRequest* request, ::techmo::tts::grpc_api::GetLexiconResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Lists all client-defined lexicons which can be referred by `<lexicon>` tag in synthesize requests.
      // Returns the list of names of lexicons.
      virtual void ListLexicons(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::ListLexiconsRequest* request, ::techmo::tts::grpc_api::ListLexiconsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListLexicons(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::ListLexiconsRequest* request, ::techmo::tts::grpc_api::ListLexiconsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListLexicons(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::ListLexiconsRequest* request, ::techmo::tts::grpc_api::ListLexiconsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tts::grpc_api::ListVoicesResponse>* AsyncListVoicesRaw(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::ListVoicesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tts::grpc_api::ListVoicesResponse>* PrepareAsyncListVoicesRaw(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::ListVoicesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::techmo::tts::grpc_api::SynthesizeResponse>* SynthesizeStreamingRaw(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::SynthesizeRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::techmo::tts::grpc_api::SynthesizeResponse>* AsyncSynthesizeStreamingRaw(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::SynthesizeRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::techmo::tts::grpc_api::SynthesizeResponse>* PrepareAsyncSynthesizeStreamingRaw(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::SynthesizeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tts::grpc_api::SynthesizeResponse>* AsyncSynthesizeRaw(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::SynthesizeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tts::grpc_api::SynthesizeResponse>* PrepareAsyncSynthesizeRaw(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::SynthesizeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tts::grpc_api::PutLexiconResponse>* AsyncPutLexiconRaw(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::PutLexiconRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tts::grpc_api::PutLexiconResponse>* PrepareAsyncPutLexiconRaw(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::PutLexiconRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tts::grpc_api::DeleteLexiconResponse>* AsyncDeleteLexiconRaw(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::DeleteLexiconRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tts::grpc_api::DeleteLexiconResponse>* PrepareAsyncDeleteLexiconRaw(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::DeleteLexiconRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tts::grpc_api::GetLexiconResponse>* AsyncGetLexiconRaw(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::GetLexiconRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tts::grpc_api::GetLexiconResponse>* PrepareAsyncGetLexiconRaw(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::GetLexiconRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tts::grpc_api::ListLexiconsResponse>* AsyncListLexiconsRaw(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::ListLexiconsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tts::grpc_api::ListLexiconsResponse>* PrepareAsyncListLexiconsRaw(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::ListLexiconsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ListVoices(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::ListVoicesRequest& request, ::techmo::tts::grpc_api::ListVoicesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::techmo::tts::grpc_api::ListVoicesResponse>> AsyncListVoices(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::ListVoicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::techmo::tts::grpc_api::ListVoicesResponse>>(AsyncListVoicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::techmo::tts::grpc_api::ListVoicesResponse>> PrepareAsyncListVoices(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::ListVoicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::techmo::tts::grpc_api::ListVoicesResponse>>(PrepareAsyncListVoicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::techmo::tts::grpc_api::SynthesizeResponse>> SynthesizeStreaming(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::SynthesizeRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::techmo::tts::grpc_api::SynthesizeResponse>>(SynthesizeStreamingRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::techmo::tts::grpc_api::SynthesizeResponse>> AsyncSynthesizeStreaming(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::SynthesizeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::techmo::tts::grpc_api::SynthesizeResponse>>(AsyncSynthesizeStreamingRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::techmo::tts::grpc_api::SynthesizeResponse>> PrepareAsyncSynthesizeStreaming(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::SynthesizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::techmo::tts::grpc_api::SynthesizeResponse>>(PrepareAsyncSynthesizeStreamingRaw(context, request, cq));
    }
    ::grpc::Status Synthesize(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::SynthesizeRequest& request, ::techmo::tts::grpc_api::SynthesizeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::techmo::tts::grpc_api::SynthesizeResponse>> AsyncSynthesize(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::SynthesizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::techmo::tts::grpc_api::SynthesizeResponse>>(AsyncSynthesizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::techmo::tts::grpc_api::SynthesizeResponse>> PrepareAsyncSynthesize(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::SynthesizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::techmo::tts::grpc_api::SynthesizeResponse>>(PrepareAsyncSynthesizeRaw(context, request, cq));
    }
    ::grpc::Status PutLexicon(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::PutLexiconRequest& request, ::techmo::tts::grpc_api::PutLexiconResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::techmo::tts::grpc_api::PutLexiconResponse>> AsyncPutLexicon(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::PutLexiconRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::techmo::tts::grpc_api::PutLexiconResponse>>(AsyncPutLexiconRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::techmo::tts::grpc_api::PutLexiconResponse>> PrepareAsyncPutLexicon(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::PutLexiconRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::techmo::tts::grpc_api::PutLexiconResponse>>(PrepareAsyncPutLexiconRaw(context, request, cq));
    }
    ::grpc::Status DeleteLexicon(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::DeleteLexiconRequest& request, ::techmo::tts::grpc_api::DeleteLexiconResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::techmo::tts::grpc_api::DeleteLexiconResponse>> AsyncDeleteLexicon(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::DeleteLexiconRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::techmo::tts::grpc_api::DeleteLexiconResponse>>(AsyncDeleteLexiconRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::techmo::tts::grpc_api::DeleteLexiconResponse>> PrepareAsyncDeleteLexicon(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::DeleteLexiconRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::techmo::tts::grpc_api::DeleteLexiconResponse>>(PrepareAsyncDeleteLexiconRaw(context, request, cq));
    }
    ::grpc::Status GetLexicon(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::GetLexiconRequest& request, ::techmo::tts::grpc_api::GetLexiconResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::techmo::tts::grpc_api::GetLexiconResponse>> AsyncGetLexicon(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::GetLexiconRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::techmo::tts::grpc_api::GetLexiconResponse>>(AsyncGetLexiconRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::techmo::tts::grpc_api::GetLexiconResponse>> PrepareAsyncGetLexicon(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::GetLexiconRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::techmo::tts::grpc_api::GetLexiconResponse>>(PrepareAsyncGetLexiconRaw(context, request, cq));
    }
    ::grpc::Status ListLexicons(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::ListLexiconsRequest& request, ::techmo::tts::grpc_api::ListLexiconsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::techmo::tts::grpc_api::ListLexiconsResponse>> AsyncListLexicons(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::ListLexiconsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::techmo::tts::grpc_api::ListLexiconsResponse>>(AsyncListLexiconsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::techmo::tts::grpc_api::ListLexiconsResponse>> PrepareAsyncListLexicons(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::ListLexiconsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::techmo::tts::grpc_api::ListLexiconsResponse>>(PrepareAsyncListLexiconsRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void ListVoices(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::ListVoicesRequest* request, ::techmo::tts::grpc_api::ListVoicesResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListVoices(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::ListVoicesRequest* request, ::techmo::tts::grpc_api::ListVoicesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListVoices(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::ListVoicesRequest* request, ::techmo::tts::grpc_api::ListVoicesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SynthesizeStreaming(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::SynthesizeRequest* request, ::grpc::ClientReadReactor< ::techmo::tts::grpc_api::SynthesizeResponse>* reactor) override;
      #else
      void SynthesizeStreaming(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::SynthesizeRequest* request, ::grpc::experimental::ClientReadReactor< ::techmo::tts::grpc_api::SynthesizeResponse>* reactor) override;
      #endif
      void Synthesize(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::SynthesizeRequest* request, ::techmo::tts::grpc_api::SynthesizeResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Synthesize(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::SynthesizeRequest* request, ::techmo::tts::grpc_api::SynthesizeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Synthesize(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::SynthesizeRequest* request, ::techmo::tts::grpc_api::SynthesizeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void PutLexicon(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::PutLexiconRequest* request, ::techmo::tts::grpc_api::PutLexiconResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PutLexicon(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::PutLexiconRequest* request, ::techmo::tts::grpc_api::PutLexiconResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PutLexicon(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::PutLexiconRequest* request, ::techmo::tts::grpc_api::PutLexiconResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteLexicon(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::DeleteLexiconRequest* request, ::techmo::tts::grpc_api::DeleteLexiconResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteLexicon(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::DeleteLexiconRequest* request, ::techmo::tts::grpc_api::DeleteLexiconResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteLexicon(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::DeleteLexiconRequest* request, ::techmo::tts::grpc_api::DeleteLexiconResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetLexicon(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::GetLexiconRequest* request, ::techmo::tts::grpc_api::GetLexiconResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetLexicon(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::GetLexiconRequest* request, ::techmo::tts::grpc_api::GetLexiconResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetLexicon(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::GetLexiconRequest* request, ::techmo::tts::grpc_api::GetLexiconResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ListLexicons(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::ListLexiconsRequest* request, ::techmo::tts::grpc_api::ListLexiconsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListLexicons(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::ListLexiconsRequest* request, ::techmo::tts::grpc_api::ListLexiconsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListLexicons(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::ListLexiconsRequest* request, ::techmo::tts::grpc_api::ListLexiconsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::techmo::tts::grpc_api::ListVoicesResponse>* AsyncListVoicesRaw(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::ListVoicesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::techmo::tts::grpc_api::ListVoicesResponse>* PrepareAsyncListVoicesRaw(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::ListVoicesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::techmo::tts::grpc_api::SynthesizeResponse>* SynthesizeStreamingRaw(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::SynthesizeRequest& request) override;
    ::grpc::ClientAsyncReader< ::techmo::tts::grpc_api::SynthesizeResponse>* AsyncSynthesizeStreamingRaw(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::SynthesizeRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::techmo::tts::grpc_api::SynthesizeResponse>* PrepareAsyncSynthesizeStreamingRaw(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::SynthesizeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::techmo::tts::grpc_api::SynthesizeResponse>* AsyncSynthesizeRaw(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::SynthesizeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::techmo::tts::grpc_api::SynthesizeResponse>* PrepareAsyncSynthesizeRaw(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::SynthesizeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::techmo::tts::grpc_api::PutLexiconResponse>* AsyncPutLexiconRaw(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::PutLexiconRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::techmo::tts::grpc_api::PutLexiconResponse>* PrepareAsyncPutLexiconRaw(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::PutLexiconRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::techmo::tts::grpc_api::DeleteLexiconResponse>* AsyncDeleteLexiconRaw(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::DeleteLexiconRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::techmo::tts::grpc_api::DeleteLexiconResponse>* PrepareAsyncDeleteLexiconRaw(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::DeleteLexiconRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::techmo::tts::grpc_api::GetLexiconResponse>* AsyncGetLexiconRaw(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::GetLexiconRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::techmo::tts::grpc_api::GetLexiconResponse>* PrepareAsyncGetLexiconRaw(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::GetLexiconRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::techmo::tts::grpc_api::ListLexiconsResponse>* AsyncListLexiconsRaw(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::ListLexiconsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::techmo::tts::grpc_api::ListLexiconsResponse>* PrepareAsyncListLexiconsRaw(::grpc::ClientContext* context, const ::techmo::tts::grpc_api::ListLexiconsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListVoices_;
    const ::grpc::internal::RpcMethod rpcmethod_SynthesizeStreaming_;
    const ::grpc::internal::RpcMethod rpcmethod_Synthesize_;
    const ::grpc::internal::RpcMethod rpcmethod_PutLexicon_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteLexicon_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLexicon_;
    const ::grpc::internal::RpcMethod rpcmethod_ListLexicons_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Lists all available voices which can be used to synthesize speech.
    virtual ::grpc::Status ListVoices(::grpc::ServerContext* context, const ::techmo::tts::grpc_api::ListVoicesRequest* request, ::techmo::tts::grpc_api::ListVoicesResponse* response);
    // Synthesizes the speech (audio signal) based on the requested phrase and the optional configuration.
    // Returns audio signal with synthesized speech (streaming version, one or more response packets).
    virtual ::grpc::Status SynthesizeStreaming(::grpc::ServerContext* context, const ::techmo::tts::grpc_api::SynthesizeRequest* request, ::grpc::ServerWriter< ::techmo::tts::grpc_api::SynthesizeResponse>* writer);
    // Synthesizes the speech (audio signal) based on the requested phrase and the optional configuration.
    // Returns audio signal with synthesized speech (non-streaming version, always one repsonse packet).
    virtual ::grpc::Status Synthesize(::grpc::ServerContext* context, const ::techmo::tts::grpc_api::SynthesizeRequest* request, ::techmo::tts::grpc_api::SynthesizeResponse* response);
    // Adds a new lexicon with the requested name or overwrites the existing one if there is already a lexicon with such name.
    virtual ::grpc::Status PutLexicon(::grpc::ServerContext* context, const ::techmo::tts::grpc_api::PutLexiconRequest* request, ::techmo::tts::grpc_api::PutLexiconResponse* response);
    // Removes the lexicon with the requested name.
    virtual ::grpc::Status DeleteLexicon(::grpc::ServerContext* context, const ::techmo::tts::grpc_api::DeleteLexiconRequest* request, ::techmo::tts::grpc_api::DeleteLexiconResponse* response);
    // Sends back the content of the lexicon with the requested name.
    // Returns the lexicon content.
    virtual ::grpc::Status GetLexicon(::grpc::ServerContext* context, const ::techmo::tts::grpc_api::GetLexiconRequest* request, ::techmo::tts::grpc_api::GetLexiconResponse* response);
    // Lists all client-defined lexicons which can be referred by `<lexicon>` tag in synthesize requests.
    // Returns the list of names of lexicons.
    virtual ::grpc::Status ListLexicons(::grpc::ServerContext* context, const ::techmo::tts::grpc_api::ListLexiconsRequest* request, ::techmo::tts::grpc_api::ListLexiconsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListVoices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListVoices() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListVoices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListVoices(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::ListVoicesRequest* /*request*/, ::techmo::tts::grpc_api::ListVoicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListVoices(::grpc::ServerContext* context, ::techmo::tts::grpc_api::ListVoicesRequest* request, ::grpc::ServerAsyncResponseWriter< ::techmo::tts::grpc_api::ListVoicesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SynthesizeStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SynthesizeStreaming() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SynthesizeStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SynthesizeStreaming(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::SynthesizeRequest* /*request*/, ::grpc::ServerWriter< ::techmo::tts::grpc_api::SynthesizeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSynthesizeStreaming(::grpc::ServerContext* context, ::techmo::tts::grpc_api::SynthesizeRequest* request, ::grpc::ServerAsyncWriter< ::techmo::tts::grpc_api::SynthesizeResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Synthesize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Synthesize() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Synthesize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Synthesize(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::SynthesizeRequest* /*request*/, ::techmo::tts::grpc_api::SynthesizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSynthesize(::grpc::ServerContext* context, ::techmo::tts::grpc_api::SynthesizeRequest* request, ::grpc::ServerAsyncResponseWriter< ::techmo::tts::grpc_api::SynthesizeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PutLexicon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PutLexicon() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_PutLexicon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutLexicon(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::PutLexiconRequest* /*request*/, ::techmo::tts::grpc_api::PutLexiconResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutLexicon(::grpc::ServerContext* context, ::techmo::tts::grpc_api::PutLexiconRequest* request, ::grpc::ServerAsyncResponseWriter< ::techmo::tts::grpc_api::PutLexiconResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteLexicon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteLexicon() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteLexicon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLexicon(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::DeleteLexiconRequest* /*request*/, ::techmo::tts::grpc_api::DeleteLexiconResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteLexicon(::grpc::ServerContext* context, ::techmo::tts::grpc_api::DeleteLexiconRequest* request, ::grpc::ServerAsyncResponseWriter< ::techmo::tts::grpc_api::DeleteLexiconResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLexicon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLexicon() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetLexicon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLexicon(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::GetLexiconRequest* /*request*/, ::techmo::tts::grpc_api::GetLexiconResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLexicon(::grpc::ServerContext* context, ::techmo::tts::grpc_api::GetLexiconRequest* request, ::grpc::ServerAsyncResponseWriter< ::techmo::tts::grpc_api::GetLexiconResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListLexicons : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListLexicons() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ListLexicons() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLexicons(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::ListLexiconsRequest* /*request*/, ::techmo::tts::grpc_api::ListLexiconsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListLexicons(::grpc::ServerContext* context, ::techmo::tts::grpc_api::ListLexiconsRequest* request, ::grpc::ServerAsyncResponseWriter< ::techmo::tts::grpc_api::ListLexiconsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListVoices<WithAsyncMethod_SynthesizeStreaming<WithAsyncMethod_Synthesize<WithAsyncMethod_PutLexicon<WithAsyncMethod_DeleteLexicon<WithAsyncMethod_GetLexicon<WithAsyncMethod_ListLexicons<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListVoices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListVoices() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::techmo::tts::grpc_api::ListVoicesRequest, ::techmo::tts::grpc_api::ListVoicesResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::techmo::tts::grpc_api::ListVoicesRequest* request, ::techmo::tts::grpc_api::ListVoicesResponse* response) { return this->ListVoices(context, request, response); }));}
    void SetMessageAllocatorFor_ListVoices(
        ::grpc::experimental::MessageAllocator< ::techmo::tts::grpc_api::ListVoicesRequest, ::techmo::tts::grpc_api::ListVoicesResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::techmo::tts::grpc_api::ListVoicesRequest, ::techmo::tts::grpc_api::ListVoicesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListVoices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListVoices(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::ListVoicesRequest* /*request*/, ::techmo::tts::grpc_api::ListVoicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListVoices(
      ::grpc::CallbackServerContext* /*context*/, const ::techmo::tts::grpc_api::ListVoicesRequest* /*request*/, ::techmo::tts::grpc_api::ListVoicesResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListVoices(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::techmo::tts::grpc_api::ListVoicesRequest* /*request*/, ::techmo::tts::grpc_api::ListVoicesResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SynthesizeStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SynthesizeStreaming() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::techmo::tts::grpc_api::SynthesizeRequest, ::techmo::tts::grpc_api::SynthesizeResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::techmo::tts::grpc_api::SynthesizeRequest* request) { return this->SynthesizeStreaming(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_SynthesizeStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SynthesizeStreaming(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::SynthesizeRequest* /*request*/, ::grpc::ServerWriter< ::techmo::tts::grpc_api::SynthesizeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::techmo::tts::grpc_api::SynthesizeResponse>* SynthesizeStreaming(
      ::grpc::CallbackServerContext* /*context*/, const ::techmo::tts::grpc_api::SynthesizeRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::techmo::tts::grpc_api::SynthesizeResponse>* SynthesizeStreaming(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::techmo::tts::grpc_api::SynthesizeRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Synthesize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Synthesize() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::techmo::tts::grpc_api::SynthesizeRequest, ::techmo::tts::grpc_api::SynthesizeResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::techmo::tts::grpc_api::SynthesizeRequest* request, ::techmo::tts::grpc_api::SynthesizeResponse* response) { return this->Synthesize(context, request, response); }));}
    void SetMessageAllocatorFor_Synthesize(
        ::grpc::experimental::MessageAllocator< ::techmo::tts::grpc_api::SynthesizeRequest, ::techmo::tts::grpc_api::SynthesizeResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::techmo::tts::grpc_api::SynthesizeRequest, ::techmo::tts::grpc_api::SynthesizeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Synthesize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Synthesize(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::SynthesizeRequest* /*request*/, ::techmo::tts::grpc_api::SynthesizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Synthesize(
      ::grpc::CallbackServerContext* /*context*/, const ::techmo::tts::grpc_api::SynthesizeRequest* /*request*/, ::techmo::tts::grpc_api::SynthesizeResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Synthesize(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::techmo::tts::grpc_api::SynthesizeRequest* /*request*/, ::techmo::tts::grpc_api::SynthesizeResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PutLexicon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PutLexicon() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::techmo::tts::grpc_api::PutLexiconRequest, ::techmo::tts::grpc_api::PutLexiconResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::techmo::tts::grpc_api::PutLexiconRequest* request, ::techmo::tts::grpc_api::PutLexiconResponse* response) { return this->PutLexicon(context, request, response); }));}
    void SetMessageAllocatorFor_PutLexicon(
        ::grpc::experimental::MessageAllocator< ::techmo::tts::grpc_api::PutLexiconRequest, ::techmo::tts::grpc_api::PutLexiconResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::techmo::tts::grpc_api::PutLexiconRequest, ::techmo::tts::grpc_api::PutLexiconResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PutLexicon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutLexicon(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::PutLexiconRequest* /*request*/, ::techmo::tts::grpc_api::PutLexiconResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PutLexicon(
      ::grpc::CallbackServerContext* /*context*/, const ::techmo::tts::grpc_api::PutLexiconRequest* /*request*/, ::techmo::tts::grpc_api::PutLexiconResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PutLexicon(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::techmo::tts::grpc_api::PutLexiconRequest* /*request*/, ::techmo::tts::grpc_api::PutLexiconResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteLexicon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteLexicon() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::techmo::tts::grpc_api::DeleteLexiconRequest, ::techmo::tts::grpc_api::DeleteLexiconResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::techmo::tts::grpc_api::DeleteLexiconRequest* request, ::techmo::tts::grpc_api::DeleteLexiconResponse* response) { return this->DeleteLexicon(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteLexicon(
        ::grpc::experimental::MessageAllocator< ::techmo::tts::grpc_api::DeleteLexiconRequest, ::techmo::tts::grpc_api::DeleteLexiconResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::techmo::tts::grpc_api::DeleteLexiconRequest, ::techmo::tts::grpc_api::DeleteLexiconResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteLexicon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLexicon(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::DeleteLexiconRequest* /*request*/, ::techmo::tts::grpc_api::DeleteLexiconResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteLexicon(
      ::grpc::CallbackServerContext* /*context*/, const ::techmo::tts::grpc_api::DeleteLexiconRequest* /*request*/, ::techmo::tts::grpc_api::DeleteLexiconResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteLexicon(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::techmo::tts::grpc_api::DeleteLexiconRequest* /*request*/, ::techmo::tts::grpc_api::DeleteLexiconResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetLexicon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetLexicon() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::techmo::tts::grpc_api::GetLexiconRequest, ::techmo::tts::grpc_api::GetLexiconResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::techmo::tts::grpc_api::GetLexiconRequest* request, ::techmo::tts::grpc_api::GetLexiconResponse* response) { return this->GetLexicon(context, request, response); }));}
    void SetMessageAllocatorFor_GetLexicon(
        ::grpc::experimental::MessageAllocator< ::techmo::tts::grpc_api::GetLexiconRequest, ::techmo::tts::grpc_api::GetLexiconResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::techmo::tts::grpc_api::GetLexiconRequest, ::techmo::tts::grpc_api::GetLexiconResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetLexicon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLexicon(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::GetLexiconRequest* /*request*/, ::techmo::tts::grpc_api::GetLexiconResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetLexicon(
      ::grpc::CallbackServerContext* /*context*/, const ::techmo::tts::grpc_api::GetLexiconRequest* /*request*/, ::techmo::tts::grpc_api::GetLexiconResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetLexicon(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::techmo::tts::grpc_api::GetLexiconRequest* /*request*/, ::techmo::tts::grpc_api::GetLexiconResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListLexicons : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListLexicons() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::techmo::tts::grpc_api::ListLexiconsRequest, ::techmo::tts::grpc_api::ListLexiconsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::techmo::tts::grpc_api::ListLexiconsRequest* request, ::techmo::tts::grpc_api::ListLexiconsResponse* response) { return this->ListLexicons(context, request, response); }));}
    void SetMessageAllocatorFor_ListLexicons(
        ::grpc::experimental::MessageAllocator< ::techmo::tts::grpc_api::ListLexiconsRequest, ::techmo::tts::grpc_api::ListLexiconsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::techmo::tts::grpc_api::ListLexiconsRequest, ::techmo::tts::grpc_api::ListLexiconsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListLexicons() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLexicons(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::ListLexiconsRequest* /*request*/, ::techmo::tts::grpc_api::ListLexiconsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListLexicons(
      ::grpc::CallbackServerContext* /*context*/, const ::techmo::tts::grpc_api::ListLexiconsRequest* /*request*/, ::techmo::tts::grpc_api::ListLexiconsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListLexicons(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::techmo::tts::grpc_api::ListLexiconsRequest* /*request*/, ::techmo::tts::grpc_api::ListLexiconsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_ListVoices<ExperimentalWithCallbackMethod_SynthesizeStreaming<ExperimentalWithCallbackMethod_Synthesize<ExperimentalWithCallbackMethod_PutLexicon<ExperimentalWithCallbackMethod_DeleteLexicon<ExperimentalWithCallbackMethod_GetLexicon<ExperimentalWithCallbackMethod_ListLexicons<Service > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_ListVoices<ExperimentalWithCallbackMethod_SynthesizeStreaming<ExperimentalWithCallbackMethod_Synthesize<ExperimentalWithCallbackMethod_PutLexicon<ExperimentalWithCallbackMethod_DeleteLexicon<ExperimentalWithCallbackMethod_GetLexicon<ExperimentalWithCallbackMethod_ListLexicons<Service > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ListVoices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListVoices() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListVoices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListVoices(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::ListVoicesRequest* /*request*/, ::techmo::tts::grpc_api::ListVoicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SynthesizeStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SynthesizeStreaming() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SynthesizeStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SynthesizeStreaming(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::SynthesizeRequest* /*request*/, ::grpc::ServerWriter< ::techmo::tts::grpc_api::SynthesizeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Synthesize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Synthesize() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Synthesize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Synthesize(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::SynthesizeRequest* /*request*/, ::techmo::tts::grpc_api::SynthesizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PutLexicon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PutLexicon() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_PutLexicon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutLexicon(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::PutLexiconRequest* /*request*/, ::techmo::tts::grpc_api::PutLexiconResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteLexicon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteLexicon() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteLexicon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLexicon(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::DeleteLexiconRequest* /*request*/, ::techmo::tts::grpc_api::DeleteLexiconResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLexicon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLexicon() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetLexicon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLexicon(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::GetLexiconRequest* /*request*/, ::techmo::tts::grpc_api::GetLexiconResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListLexicons : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListLexicons() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ListLexicons() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLexicons(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::ListLexiconsRequest* /*request*/, ::techmo::tts::grpc_api::ListLexiconsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListVoices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListVoices() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ListVoices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListVoices(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::ListVoicesRequest* /*request*/, ::techmo::tts::grpc_api::ListVoicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListVoices(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SynthesizeStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SynthesizeStreaming() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SynthesizeStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SynthesizeStreaming(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::SynthesizeRequest* /*request*/, ::grpc::ServerWriter< ::techmo::tts::grpc_api::SynthesizeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSynthesizeStreaming(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Synthesize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Synthesize() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Synthesize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Synthesize(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::SynthesizeRequest* /*request*/, ::techmo::tts::grpc_api::SynthesizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSynthesize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PutLexicon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PutLexicon() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_PutLexicon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutLexicon(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::PutLexiconRequest* /*request*/, ::techmo::tts::grpc_api::PutLexiconResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutLexicon(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteLexicon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteLexicon() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DeleteLexicon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLexicon(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::DeleteLexiconRequest* /*request*/, ::techmo::tts::grpc_api::DeleteLexiconResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteLexicon(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLexicon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLexicon() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetLexicon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLexicon(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::GetLexiconRequest* /*request*/, ::techmo::tts::grpc_api::GetLexiconResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLexicon(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListLexicons : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListLexicons() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ListLexicons() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLexicons(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::ListLexiconsRequest* /*request*/, ::techmo::tts::grpc_api::ListLexiconsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListLexicons(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListVoices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListVoices() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListVoices(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListVoices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListVoices(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::ListVoicesRequest* /*request*/, ::techmo::tts::grpc_api::ListVoicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListVoices(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListVoices(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SynthesizeStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SynthesizeStreaming() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->SynthesizeStreaming(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_SynthesizeStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SynthesizeStreaming(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::SynthesizeRequest* /*request*/, ::grpc::ServerWriter< ::techmo::tts::grpc_api::SynthesizeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SynthesizeStreaming(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* SynthesizeStreaming(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Synthesize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Synthesize() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Synthesize(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Synthesize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Synthesize(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::SynthesizeRequest* /*request*/, ::techmo::tts::grpc_api::SynthesizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Synthesize(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Synthesize(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PutLexicon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PutLexicon() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PutLexicon(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_PutLexicon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutLexicon(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::PutLexiconRequest* /*request*/, ::techmo::tts::grpc_api::PutLexiconResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PutLexicon(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PutLexicon(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteLexicon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteLexicon() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteLexicon(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteLexicon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLexicon(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::DeleteLexiconRequest* /*request*/, ::techmo::tts::grpc_api::DeleteLexiconResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteLexicon(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteLexicon(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetLexicon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetLexicon() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLexicon(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetLexicon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLexicon(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::GetLexiconRequest* /*request*/, ::techmo::tts::grpc_api::GetLexiconResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetLexicon(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetLexicon(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListLexicons : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListLexicons() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListLexicons(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListLexicons() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLexicons(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::ListLexiconsRequest* /*request*/, ::techmo::tts::grpc_api::ListLexiconsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListLexicons(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListLexicons(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListVoices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListVoices() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::techmo::tts::grpc_api::ListVoicesRequest, ::techmo::tts::grpc_api::ListVoicesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::techmo::tts::grpc_api::ListVoicesRequest, ::techmo::tts::grpc_api::ListVoicesResponse>* streamer) {
                       return this->StreamedListVoices(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListVoices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListVoices(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::ListVoicesRequest* /*request*/, ::techmo::tts::grpc_api::ListVoicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListVoices(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::techmo::tts::grpc_api::ListVoicesRequest,::techmo::tts::grpc_api::ListVoicesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Synthesize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Synthesize() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::techmo::tts::grpc_api::SynthesizeRequest, ::techmo::tts::grpc_api::SynthesizeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::techmo::tts::grpc_api::SynthesizeRequest, ::techmo::tts::grpc_api::SynthesizeResponse>* streamer) {
                       return this->StreamedSynthesize(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Synthesize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Synthesize(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::SynthesizeRequest* /*request*/, ::techmo::tts::grpc_api::SynthesizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSynthesize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::techmo::tts::grpc_api::SynthesizeRequest,::techmo::tts::grpc_api::SynthesizeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PutLexicon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PutLexicon() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::techmo::tts::grpc_api::PutLexiconRequest, ::techmo::tts::grpc_api::PutLexiconResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::techmo::tts::grpc_api::PutLexiconRequest, ::techmo::tts::grpc_api::PutLexiconResponse>* streamer) {
                       return this->StreamedPutLexicon(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PutLexicon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PutLexicon(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::PutLexiconRequest* /*request*/, ::techmo::tts::grpc_api::PutLexiconResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPutLexicon(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::techmo::tts::grpc_api::PutLexiconRequest,::techmo::tts::grpc_api::PutLexiconResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteLexicon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteLexicon() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::techmo::tts::grpc_api::DeleteLexiconRequest, ::techmo::tts::grpc_api::DeleteLexiconResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::techmo::tts::grpc_api::DeleteLexiconRequest, ::techmo::tts::grpc_api::DeleteLexiconResponse>* streamer) {
                       return this->StreamedDeleteLexicon(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteLexicon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteLexicon(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::DeleteLexiconRequest* /*request*/, ::techmo::tts::grpc_api::DeleteLexiconResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteLexicon(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::techmo::tts::grpc_api::DeleteLexiconRequest,::techmo::tts::grpc_api::DeleteLexiconResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLexicon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLexicon() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::techmo::tts::grpc_api::GetLexiconRequest, ::techmo::tts::grpc_api::GetLexiconResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::techmo::tts::grpc_api::GetLexiconRequest, ::techmo::tts::grpc_api::GetLexiconResponse>* streamer) {
                       return this->StreamedGetLexicon(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLexicon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLexicon(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::GetLexiconRequest* /*request*/, ::techmo::tts::grpc_api::GetLexiconResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLexicon(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::techmo::tts::grpc_api::GetLexiconRequest,::techmo::tts::grpc_api::GetLexiconResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListLexicons : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListLexicons() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::techmo::tts::grpc_api::ListLexiconsRequest, ::techmo::tts::grpc_api::ListLexiconsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::techmo::tts::grpc_api::ListLexiconsRequest, ::techmo::tts::grpc_api::ListLexiconsResponse>* streamer) {
                       return this->StreamedListLexicons(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListLexicons() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListLexicons(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::ListLexiconsRequest* /*request*/, ::techmo::tts::grpc_api::ListLexiconsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListLexicons(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::techmo::tts::grpc_api::ListLexiconsRequest,::techmo::tts::grpc_api::ListLexiconsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListVoices<WithStreamedUnaryMethod_Synthesize<WithStreamedUnaryMethod_PutLexicon<WithStreamedUnaryMethod_DeleteLexicon<WithStreamedUnaryMethod_GetLexicon<WithStreamedUnaryMethod_ListLexicons<Service > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SynthesizeStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SynthesizeStreaming() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::techmo::tts::grpc_api::SynthesizeRequest, ::techmo::tts::grpc_api::SynthesizeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::techmo::tts::grpc_api::SynthesizeRequest, ::techmo::tts::grpc_api::SynthesizeResponse>* streamer) {
                       return this->StreamedSynthesizeStreaming(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SynthesizeStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SynthesizeStreaming(::grpc::ServerContext* /*context*/, const ::techmo::tts::grpc_api::SynthesizeRequest* /*request*/, ::grpc::ServerWriter< ::techmo::tts::grpc_api::SynthesizeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSynthesizeStreaming(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::techmo::tts::grpc_api::SynthesizeRequest,::techmo::tts::grpc_api::SynthesizeResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SynthesizeStreaming<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListVoices<WithSplitStreamingMethod_SynthesizeStreaming<WithStreamedUnaryMethod_Synthesize<WithStreamedUnaryMethod_PutLexicon<WithStreamedUnaryMethod_DeleteLexicon<WithStreamedUnaryMethod_GetLexicon<WithStreamedUnaryMethod_ListLexicons<Service > > > > > > > StreamedService;
};

}  // namespace grpc_api
}  // namespace tts
}  // namespace techmo


#endif  // GRPC_techmo_5ftts_2eproto__INCLUDED
