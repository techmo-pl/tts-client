# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import techmo_tts_pb2 as techmo__tts__pb2


class TTSStub(object):
    """Service that implements Techmo Text-To-Speech (TTS) API.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListVoices = channel.unary_unary(
                '/techmo.tts.grpc_api.TTS/ListVoices',
                request_serializer=techmo__tts__pb2.ListVoicesRequest.SerializeToString,
                response_deserializer=techmo__tts__pb2.ListVoicesResponse.FromString,
                )
        self.SynthesizeStreaming = channel.unary_stream(
                '/techmo.tts.grpc_api.TTS/SynthesizeStreaming',
                request_serializer=techmo__tts__pb2.SynthesizeRequest.SerializeToString,
                response_deserializer=techmo__tts__pb2.SynthesizeResponse.FromString,
                )
        self.Synthesize = channel.unary_unary(
                '/techmo.tts.grpc_api.TTS/Synthesize',
                request_serializer=techmo__tts__pb2.SynthesizeRequest.SerializeToString,
                response_deserializer=techmo__tts__pb2.SynthesizeResponse.FromString,
                )
        self.PutLexicon = channel.unary_unary(
                '/techmo.tts.grpc_api.TTS/PutLexicon',
                request_serializer=techmo__tts__pb2.PutLexiconRequest.SerializeToString,
                response_deserializer=techmo__tts__pb2.PutLexiconResponse.FromString,
                )
        self.DeleteLexicon = channel.unary_unary(
                '/techmo.tts.grpc_api.TTS/DeleteLexicon',
                request_serializer=techmo__tts__pb2.DeleteLexiconRequest.SerializeToString,
                response_deserializer=techmo__tts__pb2.DeleteLexiconResponse.FromString,
                )
        self.GetLexicon = channel.unary_unary(
                '/techmo.tts.grpc_api.TTS/GetLexicon',
                request_serializer=techmo__tts__pb2.GetLexiconRequest.SerializeToString,
                response_deserializer=techmo__tts__pb2.GetLexiconResponse.FromString,
                )
        self.ListLexicons = channel.unary_unary(
                '/techmo.tts.grpc_api.TTS/ListLexicons',
                request_serializer=techmo__tts__pb2.ListLexiconsRequest.SerializeToString,
                response_deserializer=techmo__tts__pb2.ListLexiconsResponse.FromString,
                )


class TTSServicer(object):
    """Service that implements Techmo Text-To-Speech (TTS) API.
    """

    def ListVoices(self, request, context):
        """Lists all available voices which can be used to synthesize speech.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SynthesizeStreaming(self, request, context):
        """Synthesizes the speech (audio signal) based on the requested phrase and the optional configuration.
        Returns audio signal with synthesized speech (streaming version, one or more response packets).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Synthesize(self, request, context):
        """Synthesizes the speech (audio signal) based on the requested phrase and the optional configuration.
        Returns audio signal with synthesized speech (non-streaming version, always one repsonse packet).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PutLexicon(self, request, context):
        """Adds a new lexicon with the requested name or overwrites the existing one if there is already a lexicon with such name.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteLexicon(self, request, context):
        """Removes the lexicon with the requested name.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLexicon(self, request, context):
        """Sends back the content of the lexicon with the requested name.
        Returns the lexicon content.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListLexicons(self, request, context):
        """Lists all client-defined lexicons which can be referred by `<lexicon>` tag in synthesize requests.
        Returns the list of names of lexicons.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TTSServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListVoices': grpc.unary_unary_rpc_method_handler(
                    servicer.ListVoices,
                    request_deserializer=techmo__tts__pb2.ListVoicesRequest.FromString,
                    response_serializer=techmo__tts__pb2.ListVoicesResponse.SerializeToString,
            ),
            'SynthesizeStreaming': grpc.unary_stream_rpc_method_handler(
                    servicer.SynthesizeStreaming,
                    request_deserializer=techmo__tts__pb2.SynthesizeRequest.FromString,
                    response_serializer=techmo__tts__pb2.SynthesizeResponse.SerializeToString,
            ),
            'Synthesize': grpc.unary_unary_rpc_method_handler(
                    servicer.Synthesize,
                    request_deserializer=techmo__tts__pb2.SynthesizeRequest.FromString,
                    response_serializer=techmo__tts__pb2.SynthesizeResponse.SerializeToString,
            ),
            'PutLexicon': grpc.unary_unary_rpc_method_handler(
                    servicer.PutLexicon,
                    request_deserializer=techmo__tts__pb2.PutLexiconRequest.FromString,
                    response_serializer=techmo__tts__pb2.PutLexiconResponse.SerializeToString,
            ),
            'DeleteLexicon': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteLexicon,
                    request_deserializer=techmo__tts__pb2.DeleteLexiconRequest.FromString,
                    response_serializer=techmo__tts__pb2.DeleteLexiconResponse.SerializeToString,
            ),
            'GetLexicon': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLexicon,
                    request_deserializer=techmo__tts__pb2.GetLexiconRequest.FromString,
                    response_serializer=techmo__tts__pb2.GetLexiconResponse.SerializeToString,
            ),
            'ListLexicons': grpc.unary_unary_rpc_method_handler(
                    servicer.ListLexicons,
                    request_deserializer=techmo__tts__pb2.ListLexiconsRequest.FromString,
                    response_serializer=techmo__tts__pb2.ListLexiconsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'techmo.tts.grpc_api.TTS', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TTS(object):
    """Service that implements Techmo Text-To-Speech (TTS) API.
    """

    @staticmethod
    def ListVoices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/techmo.tts.grpc_api.TTS/ListVoices',
            techmo__tts__pb2.ListVoicesRequest.SerializeToString,
            techmo__tts__pb2.ListVoicesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SynthesizeStreaming(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/techmo.tts.grpc_api.TTS/SynthesizeStreaming',
            techmo__tts__pb2.SynthesizeRequest.SerializeToString,
            techmo__tts__pb2.SynthesizeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Synthesize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/techmo.tts.grpc_api.TTS/Synthesize',
            techmo__tts__pb2.SynthesizeRequest.SerializeToString,
            techmo__tts__pb2.SynthesizeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PutLexicon(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/techmo.tts.grpc_api.TTS/PutLexicon',
            techmo__tts__pb2.PutLexiconRequest.SerializeToString,
            techmo__tts__pb2.PutLexiconResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteLexicon(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/techmo.tts.grpc_api.TTS/DeleteLexicon',
            techmo__tts__pb2.DeleteLexiconRequest.SerializeToString,
            techmo__tts__pb2.DeleteLexiconResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLexicon(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/techmo.tts.grpc_api.TTS/GetLexicon',
            techmo__tts__pb2.GetLexiconRequest.SerializeToString,
            techmo__tts__pb2.GetLexiconResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListLexicons(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/techmo.tts.grpc_api.TTS/ListLexicons',
            techmo__tts__pb2.ListLexiconsRequest.SerializeToString,
            techmo__tts__pb2.ListLexiconsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
